Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 

Constraints:

1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109

------------------------------------

Solution 1 - 
TC - O(n ^ 3)
SC - O(log n) or O(n) for internal sorting

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        
        for(int i = 0; i < nums.length - 1; i++)
        {
            for(int j = i + 1; j < nums.length - 1; j++)
            {
                int low = j + 1, high = nums.length - 1;
                
                long t = (long)target - nums[i] - nums[j];
                
                while(low < high)
                {
                    
                    if(nums[low] + nums[high] == t)
                    {
                        result.add(new ArrayList<>(Arrays.asList(nums[i], nums[j], nums[low], nums[high])));
                        
                       while(low < high && nums[low] == nums[low + 1])
                        {
                            low++;
                        }

                        while(low < high && nums[high] == nums[high - 1])
                        {
                            high--; 
                        }
                        low++;
                        high--;
                    }
                    else if(nums[low] + nums[high] < t)
                    {
                        low++;
                    }
                    else
                    {
                        high--;
                    }
                    
                }
                while(j < nums.length - 1 && nums[j] == nums[j + 1])
                {
                    j++;
                }
                
            }
            while(i < nums.length - 1 && nums[i] == nums[i + 1])
            {
                i++;
            }
            
        }
        return result;
    }
}
